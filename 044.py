## SOLVED ineligant brute force with guess for upper bound
#
# Project Euler Problem 44
# ========================
#
# Pentagonal numbers are generated by the formula,
# Pn=n(3n-1)/2. The first ten pentagonal numbers
# are:
# 
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# 
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
# However, their difference, 70 - 22 = 48, is not
# pentagonal.
# 
# Find the pair of pentagonal numbers, Pj and Pk,
# for which their sum and difference is pentagonal
# and D = |Pk - Pj| is minimised; what is the value
# of D?

from math import sqrt

def P(n):
    return n*((3*n)-1)/2

def isPentagonal(Pn):
    k=(1+sqrt(1+(24*Pn)))/6
    if k==int(k):
        return True
    else: return False

print 'Listing pentagonals'
pents=map(P,range(1,10000))
D=10000000000

print 'Searching'
for Pj in pents:
    for Pk in pents:
        if Pj!=Pk:
            if isPentagonal(Pj+Pk):
                if isPentagonal(abs(Pk-Pj)):
                    if abs(Pk-Pj)<D:
                        D=abs(Pk-Pj)
                        print Pk
                        print Pj
                        
print D
            
