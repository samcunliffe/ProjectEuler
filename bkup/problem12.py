# Project Euler Problem 12
# ========================
# The sequence of triangle numbers is generated by 
# adding the natural numbers. So the 7^(th) triangle
# number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
#
# The first ten terms would be:
#  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven 
# triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number 
# to have over five divisors.
#
# What is the value of the first triangle number to
# have over five hundred divisors?

import math

# find the number of divisors
def countDivisors(n):
   t=0
   for j in range(1,math.sqrt(n)+1):
      rems=n%j
      if rems==0:
         t+=1
   return 2*t


i=0
c=1
t=0

while c < 500:
   i+=1
   t+=i
   c=countDivisors(t)
   
   if i%1000==0:
      print "I'm still going!"
      print " iteration       =" + `i`
      print " triangle number =" + `t`

print "---------Finished---------"
print " iteration          =" + `i`
print " triangle number    =" + `t`
print " number of divisors =" + `c`



